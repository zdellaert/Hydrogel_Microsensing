Oxygen_breakpoint = numeric(),
stringsAsFactors = FALSE
)
# Get list of CSV file names with "1000" in the title
file_list <- list.files(path = "./Polymerized041024_Measured041224", pattern = "1000.*\\.csv$", full.names = TRUE)
# Loop over files
for (file_path in file_list) {
# Read data from file
data <- read_csv(file_path, show_col_types = FALSE) %>%
mutate(Replicate = as.factor(Replicate)) %>%
rename("Oxygen (µmol/L)" = `A FireSting Ch1 (µmol/L)`) %>%
arrange(`Depth (µm)`)
# Loop over replicates
for (replicate_id in unique(data$Replicate)) {
# Subset data for the current replicate
replicate_data <- data %>%
filter(Replicate == replicate_id & Condition == "Light") %>%
filter(`Depth (µm)` <= 0)
# Extract oxygen concentration and depth
oxygen_concentration <- replicate_data %>% pull(`Oxygen (µmol/L)`)
depth <- replicate_data %>% pull(`Depth (µm)`)
# Perform segmented regression
regression_results <- perform_segmented_regression(oxygen_concentration, depth)
# Plot data and segmented regression lines
p <- ggplot(replicate_data, aes(x = `Depth (µm)`, y = `Oxygen (µmol/L)`)) +
geom_point() +
geom_line(data = regression_results$fitted_data, aes(x = `Depth`, y = `Oxygen`), color = "red") +
labs(title = paste("Replicate", replicate_id), x = "Depth (µm)", y = "Oxygen (µmol/L)")
print(p)
# Calculate flux using Fick’s first law of diffusion
DO2 <- 2.2417e-5  # Diffusion coefficient of oxygen
flux <- DO2 * regression_results$slope
# Store results in dataframe
results_df_1000um_segmented <- bind_rows(results_df_1000um_segmented, data.frame(
File = basename(file_path),
Scaffold_Thickness = "1000 um",
Replicate = replicate_id,
slope = regression_results$slope,
Flux = flux,
Breakpoint = regression_results$breakpoint,
Oxygen_Surface = regression_results$Oxygen_Surface,
Oxygen_breakpoint = regression_results$Oxygen_breakpoint,
stringsAsFactors = FALSE
))
}
}
# Print the results dataframe
print(results_df_1000um_segmented)
results_df_200um_segmented <- data.frame(
File = character(),
Scaffold_Thickness = character(),
Replicate = character(),
slope = numeric(),
Flux = numeric(),
Breakpoint = numeric(),
Oxygen_Surface = numeric(),
Oxygen_breakpoint = numeric(),
stringsAsFactors = FALSE
)
# Get list of CSV file names with "200" in the title
file_list <- list.files(path = "./Polymerized041024_Measured041224", pattern = "200.*\\.csv$", full.names = TRUE)
# Loop over files
for (file_path in file_list) {
# Read data from file
data <- read_csv(file_path, show_col_types = FALSE) %>%
mutate(Replicate = as.factor(Replicate)) %>%
rename("Oxygen (µmol/L)" = `A FireSting Ch1 (µmol/L)`) %>%
arrange(`Depth (µm)`)
# Loop over replicates
for (replicate_id in unique(data$Replicate)) {
# Subset data for the current replicate
replicate_data <- data %>%
filter(Replicate == replicate_id & Condition == "Light") %>%
filter(`Depth (µm)` <= 0)
# Extract oxygen concentration and depth
oxygen_concentration <- replicate_data %>% pull(`Oxygen (µmol/L)`)
depth <- replicate_data %>% pull(`Depth (µm)`)
# Perform segmented regression
regression_results <- perform_segmented_regression(oxygen_concentration, depth)
# Plot data and segmented regression lines
p <- ggplot(replicate_data, aes(x = `Depth (µm)`, y = `Oxygen (µmol/L)`)) +
geom_point() +
geom_line(data = regression_results$fitted_data, aes(x = `Depth`, y = `Oxygen`), color = "red") +
labs(title = paste("Replicate", replicate_id), x = "Depth (µm)", y = "Oxygen (µmol/L)")
print(p)
# Calculate flux using Fick’s first law of diffusion
DO2 <- 2.2417e-5  # Diffusion coefficient of oxygen
flux <- DO2 * regression_results$slope
# Store results in dataframe
results_df_200um_segmented <- bind_rows(results_df_200um_segmented, data.frame(
File = basename(file_path),
Scaffold_Thickness = "200 um",
Replicate = replicate_id,
slope = regression_results$slope,
Flux = flux,
Breakpoint = regression_results$breakpoint,
Oxygen_Surface = regression_results$Oxygen_Surface,
Oxygen_breakpoint = regression_results$Oxygen_breakpoint,
stringsAsFactors = FALSE
))
}
}
# Print the results dataframe
print(results_df_200um_segmented)
Full_results_segmented_041224 <- rbind(results_df_1000um_segmented, results_df_200um_segmented)
Full_results_segmented_041224
mean_flux <- Full_results_segmented_041224 %>%
group_by(Scaffold_Thickness) %>%
summarize(mean_flux = mean(Flux))
# Plotting the flux values for each thickness
flux_plot <- ggplot(Full_results_segmented_041224, aes(x = Scaffold_Thickness, y = Flux)) +
geom_boxplot() + geom_point(aes(color = File), position = position_jitter(width = 0.05)) +
geom_text(data = mean_flux, aes(label = paste("Mean Flux = \n", sprintf("%.2e", mean_flux)), y = mean_flux-.000002), vjust = 0.1, position = position_nudge(x = 0.25)) +
labs(x = "Thickness (µm)", y = "Flux") +
ggtitle("Flux Comparison between Thicknesses,\n same areal density (4/12/24)")
flux_plot
ggsave("Plots/Polymerized041024_Measured041224_Flux_plot.png", flux_plot, device = "png")
# Running ANOVA
anova_result <- aov(Flux ~ Scaffold_Thickness, data = Full_results_segmented_041224)
summary(anova_result)
# What about for oxygen surface concentration?
mean_Oxygen_Surface <- Full_results_segmented_041224 %>%
group_by(Scaffold_Thickness) %>%
summarize(mean_Oxygen_Surface = mean(Oxygen_Surface))
# Plotting the surface O2 values for each thickness
ggplot(Full_results_segmented_041224, aes(x = Scaffold_Thickness, y = Oxygen_Surface)) +
geom_boxplot() + geom_point(aes(color = File), position = position_jitter(width = 0.05)) +
geom_text(data = mean_Oxygen_Surface, aes(label = paste("Mean Surface Oxygen = \n", round(mean_Oxygen_Surface, 1)), y = mean_Oxygen_Surface-25), vjust = 0.1, position = position_nudge(x = 0.0)) +
labs(x = "Thickness (µm)", y = "Oxygen Surface Concentration (µmol/L)") +
ggtitle("Oxygen Surface Concentration (µmol/L) Comparison between Thicknesses")
# Running ANOVA
anova_result <- aov(Oxygen_Surface ~ Scaffold_Thickness, data = Full_results_segmented_041224)
summary(anova_result)
# What about DBL Thickness?
mean_DBL_end <- Full_results_segmented_041224 %>%
group_by(Scaffold_Thickness) %>%
summarize(mean_DBL_end = mean(Breakpoint))
# Plotting the DBL Thickness for each scaffold thickness
ggplot(Full_results_segmented_041224, aes(x = Scaffold_Thickness, y = -Breakpoint)) +
geom_boxplot() + geom_point(aes(color = File), position = position_jitter(width = 0.05)) +
geom_text(data = mean_DBL_end, aes(label = paste("Mean DBL Thickness = \n", round(-mean_DBL_end, 1)), y = -mean_DBL_end-65), vjust = 0.1, position = position_nudge(x = 0.0)) +
labs(x = "Thickness (µm)", y = "DBL Thickness (µm)") +
ggtitle("DBL Thickness (µm) Comparison between Thicknesses")
# Running ANOVA
anova_result <- aov(Breakpoint ~ Scaffold_Thickness, data = Full_results_segmented_041224)
summary(anova_result)
files <- list.files(path = "./Polymerized041024_Measured041224", pattern = "\\.csv$", full.names = TRUE)
plot_list <- list()
for (file in files) {
file_name <- tools::file_path_sans_ext(basename(file))
file_data <- read_csv(paste(file),show_col_types = FALSE) %>%
mutate(Replicate = as.factor(Replicate)) %>%
rename("Oxygen (µmol/L)" = `A FireSting Ch1 (µmol/L)`) %>% filter(Condition == "Light" | Condition == "Dark")
# Extract the DBL depth for the current file
dbl_depth <- Full_results_segmented_041224$Breakpoint[gsub("\\.csv$", "", Full_results_segmented_041224$File) == file_name]
plot <- ggplot(data = file_data, aes(y = `Oxygen (µmol/L)`, x = `Depth (µm)`,
color = `Condition`, shape = `Replicate`)) +
geom_point() + geom_line() +
coord_flip() + scale_x_reverse() + xlim(0, -1000) + ylim(140, 405) +
theme_bw() + ggtitle(file_name) +
annotate("text", x = -900, y = 395, label = paste("Start:", file_data$Time[1]), vjust = 1, hjust = 1, size = 3) +
annotate("text", x = -850, y = 395, label = paste("End:", file_data$Time[nrow(file_data)]), vjust = 1, hjust = 1, size = 3) +
geom_vline(xintercept = dbl_depth, linetype = "dashed") +  # Add DBL depth line
theme(legend.position = "bottom")
#print(plot)
plot_list[[file_name]] <- plot
}
arranged_plots <- arrangeGrob(grobs = plot_list, ncol = 3)
gridExtra::grid.arrange(arranged_plots)
ggsave("Plots/Polymerized041024_Measured041224_plots_DBL.png", arranged_plots, width = 16, height = 9, units = "in", device = "png")
files <- list.files(path = "./Polymerized040824_Measured041324", pattern = "\\.csv$", full.names = TRUE)
plot_list <- list()
for (file in files) {
file_name <- tools::file_path_sans_ext(basename(file))
file_data <- read_csv(paste(file),show_col_types = FALSE) %>%
mutate(Replicate = as.factor(Replicate)) %>%
rename("Oxygen (µmol/L)" = `A FireSting Ch1 (µmol/L)`) #%>% filter(Condition == "Light" | Condition == "Dark")
plot <- ggplot(data = file_data, aes(y = `Oxygen (µmol/L)`, x = `Depth (µm)`,
color = `Condition`, shape = `Replicate`)) +
geom_point() + geom_line() +
coord_flip() + scale_x_reverse() + xlim(1000, -1450) + ylim(200, 900) +
geom_vline(xintercept = 0, linetype = 3) +
theme_bw() + ggtitle(file_name) +
annotate("text", x = -1400, y = 395, label = paste("Start:", file_data$Time[1]), vjust = 1, hjust = 1, size = 3) +
annotate("text", x = -1300, y = 395, label = paste("End:", file_data$Time[nrow(file_data)]), vjust = 1, hjust = 1, size = 3) +
theme(legend.position = "bottom")
#print(plot)
plot_list[[file_name]] <- plot
}
arranged_plots <- arrangeGrob(grobs = plot_list, ncol = 3)
gridExtra::grid.arrange(arranged_plots)
ggsave("Plots/Polymerized040824_Measured041324_plots.png", arranged_plots, width = 16, height = 9, units = "in", device = "png")
files <- list.files(path = "./Polymerized040824_Measured041324", pattern = "\\.csv$", full.names = TRUE)
plot_list <- list()
for (file in files) {
file_name <- tools::file_path_sans_ext(basename(file))
file_data <- read_csv(paste(file),show_col_types = FALSE) %>%
mutate(Replicate = as.factor(Replicate)) %>%
rename("Oxygen (µmol/L)" = `A FireSting Ch1 (µmol/L)`) #%>% filter(Condition == "Light" | Condition == "Dark")
# Determine the x-limits and color for the rectangle based on the file name
if (grepl("1000", file_name)) {
rect_x <- c(0, 1000)
} else {
rect_x <- c(0, 200)
}
plot <- ggplot(data = file_data, aes(y = `Oxygen (µmol/L)`, x = `Depth (µm)`,
color = `Condition`, shape = `Replicate`)) +
geom_rect(aes(xmin = rect_x[1], xmax = rect_x[2], ymin = -Inf, ymax = Inf), fill = "tan", color = "tan", alpha = 0.5) +
geom_point() + geom_line() +
coord_flip() + scale_x_reverse() + xlim(1001, -1450) + ylim(200, 900) +
geom_vline(xintercept = 0, linetype = 3) +
theme_bw() + ggtitle(file_name) +
annotate("text", x = -1400, y = 395, label = paste("Start:", file_data$Time[1]), vjust = 1, hjust = 1, size = 3) +
annotate("text", x = -1300, y = 395, label = paste("End:", file_data$Time[nrow(file_data)]), vjust = 1, hjust = 1, size = 3) +
theme(legend.position = "bottom")
print(plot)
}
library(segmented)
# Function to perform segmented regression and extract slope after breakpoint
perform_segmented_regression <- function(oxygen_concentration, depth) {
# Fit segmented regression model
fit <- segmented(lm(oxygen_concentration ~ depth), seg.Z = ~depth, psi = -250)
# Extract the breakpoint(s)
breakpoint <- fit$psi[, 2]
# Find the index of the datapoint nearest to the breakpoint
breakpoint_index <- which.min(abs(depth - breakpoint))
# Extract the oxygen concentration at the breakpoint
Oxygen_breakpoint <- oxygen_concentration[breakpoint_index]
# Extract the oxygen concentration at depth = 0
Oxygen_Surface <- oxygen_concentration[which(depth == 0)]
# Extract the slope after the breakpoint for each segment
lm_fit <- lm(oxygen_concentration ~ depth,
data = data.frame(depth = depth[breakpoint_index:length(depth)],
oxygen_concentration = oxygen_concentration[breakpoint_index:length(oxygen_concentration)]))
slope <- coef(lm_fit)["depth"]
# Calculate fitted values for segmented regression lines
fitted_values <- fitted(fit, newdata = data.frame(depth = depth))
# Create dataframe with depth and fitted oxygen concentration values
fitted_data <- data.frame("Depth" = depth, "Oxygen" = fitted_values)
return(list(
slope = slope,
breakpoint = breakpoint,
Oxygen_breakpoint = Oxygen_breakpoint,
Oxygen_Surface = Oxygen_Surface,
fitted_data = fitted_data
))
}
results_df_1000um_segmented <- data.frame(
File = character(),
Scaffold_Thickness = character(),
Replicate = character(),
slope = numeric(),
Flux = numeric(),
Breakpoint = numeric(),
Oxygen_Surface = numeric(),
Oxygen_breakpoint = numeric(),
stringsAsFactors = FALSE
)
# Get list of CSV file names with "1000" in the title
file_list <- list.files(path = "./Polymerized040824_Measured041324", pattern = "1000.*\\.csv$", full.names = TRUE)
# Loop over files
for (file_path in file_list) {
# Read data from file
data <- read_csv(file_path, show_col_types = FALSE) %>%
mutate(Replicate = as.factor(Replicate)) %>%
rename("Oxygen (µmol/L)" = `A FireSting Ch1 (µmol/L)`) %>%
arrange(`Depth (µm)`)
# Loop over replicates
for (replicate_id in unique(data$Replicate)) {
# Subset data for the current replicate
replicate_data <- data %>%
filter(Replicate == replicate_id & Condition == "Light")  %>%
filter(`Depth (µm)` <= 0)
# Extract oxygen concentration and depth
oxygen_concentration <- replicate_data %>% pull(`Oxygen (µmol/L)`)
depth <- replicate_data %>% pull(`Depth (µm)`)
# Perform segmented regression
regression_results <- perform_segmented_regression(oxygen_concentration, depth)
# Plot data and segmented regression lines
p <- ggplot(replicate_data, aes(x = `Depth (µm)`, y = `Oxygen (µmol/L)`)) +
geom_point() +
geom_line(data = regression_results$fitted_data, aes(x = `Depth`, y = `Oxygen`), color = "red") +
labs(title = paste("Replicate", replicate_id), x = "Depth (µm)", y = "Oxygen (µmol/L)")
print(p)
# Calculate flux using Fick’s first law of diffusion
DO2 <- 2.2417e-5  # Diffusion coefficient of oxygen
flux <- DO2 * regression_results$slope
# Store results in dataframe
results_df_1000um_segmented <- bind_rows(results_df_1000um_segmented, data.frame(
File = basename(file_path),
Scaffold_Thickness = "1000 um",
Replicate = replicate_id,
slope = regression_results$slope,
Flux = flux,
Breakpoint = regression_results$breakpoint,
Oxygen_Surface = regression_results$Oxygen_Surface,
Oxygen_breakpoint = regression_results$Oxygen_breakpoint,
stringsAsFactors = FALSE
))
}
}
# Print the results dataframe
print(results_df_1000um_segmented)
results_df_200um_segmented <- data.frame(
File = character(),
Scaffold_Thickness = character(),
Replicate = character(),
slope = numeric(),
Flux = numeric(),
Breakpoint = numeric(),
Oxygen_Surface = numeric(),
Oxygen_breakpoint = numeric(),
stringsAsFactors = FALSE
)
# Get list of CSV file names with "200" in the title
file_list <- list.files(path = "./Polymerized040824_Measured041324", pattern = "200.*\\.csv$", full.names = TRUE)
# Loop over files
for (file_path in file_list) {
# Read data from file
data <- read_csv(file_path, show_col_types = FALSE) %>%
mutate(Replicate = as.factor(Replicate)) %>%
rename("Oxygen (µmol/L)" = `A FireSting Ch1 (µmol/L)`) %>%
arrange(`Depth (µm)`)
# Loop over replicates
for (replicate_id in unique(data$Replicate)) {
# Subset data for the current replicate
replicate_data <- data %>%
filter(Replicate == replicate_id & Condition == "Light") %>%
filter(`Depth (µm)` <= 0)
# Extract oxygen concentration and depth
oxygen_concentration <- replicate_data %>% pull(`Oxygen (µmol/L)`)
depth <- replicate_data %>% pull(`Depth (µm)`)
# Perform segmented regression
regression_results <- perform_segmented_regression(oxygen_concentration, depth)
# Plot data and segmented regression lines
p <- ggplot(replicate_data, aes(x = `Depth (µm)`, y = `Oxygen (µmol/L)`)) +
geom_point() +
geom_line(data = regression_results$fitted_data, aes(x = `Depth`, y = `Oxygen`), color = "red") +
labs(title = paste("Replicate", replicate_id), x = "Depth (µm)", y = "Oxygen (µmol/L)")
print(p)
# Calculate flux using Fick’s first law of diffusion
DO2 <- 2.2417e-5  # Diffusion coefficient of oxygen
flux <- DO2 * regression_results$slope
# Store results in dataframe
results_df_200um_segmented <- bind_rows(results_df_200um_segmented, data.frame(
File = basename(file_path),
Scaffold_Thickness = "200 um",
Replicate = replicate_id,
slope = regression_results$slope,
Flux = flux,
Breakpoint = regression_results$breakpoint,
Oxygen_Surface = regression_results$Oxygen_Surface,
Oxygen_breakpoint = regression_results$Oxygen_breakpoint,
stringsAsFactors = FALSE
))
}
}
# Print the results dataframe
print(results_df_200um_segmented)
Full_results_segmented_041324 <- rbind(results_df_1000um_segmented, results_df_200um_segmented)
Full_results_segmented_041324
mean_flux <- Full_results_segmented_041324 %>%
group_by(Scaffold_Thickness) %>%
summarize(mean_flux = mean(Flux))
# Plotting the flux values for each thickness
flux_plot <- ggplot(Full_results_segmented_041324, aes(x = Scaffold_Thickness, y = Flux)) +
geom_boxplot() + geom_point(aes(color = File,shape = Replicate), position = position_jitter(width = 0.05)) +
geom_text(data = mean_flux, aes(label = paste("Mean Flux = \n", sprintf("%.2e", mean_flux)), y = mean_flux-.000002), vjust = 0.1, position = position_nudge(x = 0.25)) +
labs(x = "Thickness (µm)", y = "Flux") +
ggtitle("Flux Comparison between Thicknesses,\n same volumetric density (4/13/24)")
flux_plot
ggsave("Plots/Polymerized040824_Measured041324_Flux_plot.png", flux_plot, device = "png")
# Running ANOVA
anova_result <- aov(Flux ~ Scaffold_Thickness, data = Full_results_segmented_041324)
summary(anova_result)
# What about for oxygen surface concentration?
mean_Oxygen_Surface <- Full_results_segmented_041324 %>%
group_by(Scaffold_Thickness) %>%
summarize(mean_Oxygen_Surface = mean(Oxygen_Surface))
# Plotting the surface O2 values for each thickness
ggplot(Full_results_segmented_041324, aes(x = Scaffold_Thickness, y = Oxygen_Surface)) +
geom_boxplot() + geom_point(aes(color = File), position = position_jitter(width = 0.05)) +
geom_text(data = mean_Oxygen_Surface, aes(label = paste("Mean Surface Oxygen = \n", round(mean_Oxygen_Surface, 1)), y = mean_Oxygen_Surface-25), vjust = 0.1, position = position_nudge(x = 0.0)) +
labs(x = "Thickness (µm)", y = "Oxygen Surface Concentration (µmol/L)") +
ggtitle("Oxygen Surface Concentration (µmol/L) Comparison between Thicknesses")
# Running ANOVA
anova_result <- aov(Oxygen_Surface ~ Scaffold_Thickness, data = Full_results_segmented_041324)
summary(anova_result)
# What about DBL Thickness?
mean_DBL_end <- Full_results_segmented_041324 %>%
group_by(Scaffold_Thickness) %>%
summarize(mean_DBL_end = mean(Breakpoint))
# Plotting the DBL Thickness for each scaffold thickness
ggplot(Full_results_segmented_041324, aes(x = Scaffold_Thickness, y = -Breakpoint)) +
geom_boxplot() + geom_point(aes(color = File), position = position_jitter(width = 0.05)) +
geom_text(data = mean_DBL_end, aes(label = paste("Mean DBL Thickness = \n", round(-mean_DBL_end, 1)), y = -mean_DBL_end-65), vjust = 0.1, position = position_nudge(x = 0.0)) +
labs(x = "Thickness (µm)", y = "DBL Thickness (µm)") +
ggtitle("DBL Thickness (µm) Comparison between Thicknesses")
# Running ANOVA
anova_result <- aov(Breakpoint ~ Scaffold_Thickness, data = Full_results_segmented_041324)
summary(anova_result)
files <- list.files(path = "./Polymerized040824_Measured041324", pattern = "\\.csv$", full.names = TRUE)
plot_list <- list()
for (file in files) {
file_name <- tools::file_path_sans_ext(basename(file))
file_data <- read_csv(paste(file),show_col_types = FALSE) %>%
mutate(Replicate = as.factor(Replicate)) %>%
rename("Oxygen (µmol/L)" = `A FireSting Ch1 (µmol/L)`) %>% filter(Condition == "Light" | Condition == "Dark")
# Extract the DBL depth for the current file
dbl_depth <- Full_results_segmented_041324$Breakpoint[gsub("\\.csv$", "", Full_results_segmented_041324$File) == file_name]
plot <- ggplot(data = file_data, aes(y = `Oxygen (µmol/L)`, x = `Depth (µm)`,
color = `Condition`, shape = `Replicate`)) +
geom_point() + geom_line() +
coord_flip() + scale_x_reverse() + xlim(0, -1000) + ylim(200, 400) +
theme_bw() + ggtitle(file_name) +
annotate("text", x = -900, y = 395, label = paste("Start:", file_data$Time[1]), vjust = 1, hjust = 1, size = 3) +
annotate("text", x = -850, y = 395, label = paste("End:", file_data$Time[nrow(file_data)]), vjust = 1, hjust = 1, size = 3) +
geom_vline(xintercept = dbl_depth, linetype = "dashed") +  # Add DBL depth line
theme(legend.position = "bottom")
#print(plot)
plot_list[[file_name]] <- plot
}
arranged_plots <- arrangeGrob(grobs = plot_list, ncol = 3)
gridExtra::grid.arrange(arranged_plots)
ggsave("Plots/Polymerized040824_Measured041324_plots_DBL.png", arranged_plots, width = 16, height = 9, units = "in", device = "png")
Full_results_segmented_041024$date <- "041024"
Full_results_segmented_041024$polymerization_date <- "040824"
Full_results_segmented_041224$date <- "041224"
Full_results_segmented_041224$polymerization_date <- "041024"
Full_results_segmented_041324$date <- "041324"
Full_results_segmented_041324$polymerization_date <- "040824"
# Combine the dataframes
Full_results_segmented <- rbind(Full_results_segmented_041024,
Full_results_segmented_041224,
Full_results_segmented_041324)
Full_results_segmented
mean_flux <- Full_results_segmented %>%
group_by(Scaffold_Thickness, date) %>%
summarize(mean_flux = mean(Flux))
# Plotting the flux values for each thickness
flux_plot <- ggplot(Full_results_segmented, aes(x = date, y = Flux, group = interaction(Scaffold_Thickness, date), color = Scaffold_Thickness)) +
geom_boxplot() + geom_point(position = position_dodge(width = 0.75)) +
#geom_text(data = mean_flux, aes(label = paste("Mean Flux = \n", sprintf("%.2e", mean_flux)), y = mean_flux-.000002), vjust = 0.1, position = position_nudge(x = 0.25)) +
labs(x = "Measurement Date", y = "Flux") +
ggtitle("Flux Comparison between Thicknesses and Dates")
flux_plot
ggsave("Plots/Flux_plot.png", flux_plot, device = "png")
# Running ANOVA
anova_result <- aov(Flux ~ Scaffold_Thickness, data = Full_results_segmented)
summary(anova_result)
mean_Oxygen_Surface <- Full_results_segmented %>%
group_by(Scaffold_Thickness, date) %>%
summarize(mean_Oxygen_Surface = mean(Oxygen_Surface))
# Plotting the surface O2 values for each thickness
ggplot(Full_results_segmented, aes(x = date, y = Oxygen_Surface, group = interaction(Scaffold_Thickness, date), color = Scaffold_Thickness)) +
geom_boxplot() + geom_point(position = position_dodge(width = 0.75)) +
#geom_text(data = mean_Oxygen_Surface, aes(label = paste("Mean Surface Oxygen = \n", round(mean_Oxygen_Surface, 1)), y = mean_Oxygen_Surface-25), vjust = 0.1, position = position_nudge(x = 0.0)) +
labs(x = "Measurement Date", y = "Oxygen Surface Concentration (µmol/L)") +
ggtitle("Oxygen Surface Concentration (µmol/L) Comparison between Thicknesses and Dates")
# Running ANOVA
anova_result <- aov(Oxygen_Surface ~ Scaffold_Thickness, data = Full_results_segmented)
summary(anova_result)
mean_DBL_end <- Full_results_segmented %>%
group_by(Scaffold_Thickness, date) %>%
summarize(mean_DBL_end = mean(Breakpoint))
# Plotting the DBL Thickness for each scaffold thickness
ggplot(Full_results_segmented, aes(x = date, y = -Breakpoint, group = interaction(Scaffold_Thickness, date), color = Scaffold_Thickness)) +
geom_boxplot() + geom_point(position = position_dodge(width = 0.75)) +
#geom_text(data = mean_DBL_end, aes(label = paste("Mean DBL Thickness = \n", round(-mean_DBL_end, 1)), y = -mean_DBL_end-65), vjust = 0.1, position = position_nudge(x = 0.0)) +
labs(x = "Measurement Date)", y = "DBL Thickness (µm)") +
ggtitle("DBL Thickness (µm) Comparison between Thicknesses and Dates")
# Running ANOVA
anova_result <- aov(Breakpoint ~ Scaffold_Thickness, data = Full_results_segmented)
summary(anova_result)
# Plotting the flux values for each thickness
flux_plot <- ggplot(Full_results_segmented, aes(x = date, y = Flux, group = interaction(Scaffold_Thickness, date), color = Scaffold_Thickness)) +
geom_boxplot() + geom_point(position = position_dodge(width = 0.75)) +
#geom_text(data = mean_flux, aes(label = paste("Mean Flux = \n", sprintf("%.2e", mean_flux)), y = mean_flux-.000002), vjust = 0.1, position = position_nudge(x = 0.25)) +
labs(x = "Measurement Date", y = "Flux") +
ggtitle("Flux Comparison between Thicknesses and Dates")
flux_plot
ggsave("Plots/Flux_plot.png", flux_plot, device = "png")
# Running ANOVA
anova_result <- aov(Flux ~ Scaffold_Thickness, data = Full_results_segmented)
summary(anova_result)
# What about for oxygen surface concentration?
mean_Oxygen_Surface <- Full_results_segmented %>%
group_by(Scaffold_Thickness, date) %>%
summarize(mean_Oxygen_Surface = mean(Oxygen_Surface))
# Plotting the surface O2 values for each thickness
O2_plot <- ggplot(Full_results_segmented, aes(x = date, y = Oxygen_Surface, group = interaction(Scaffold_Thickness, date), color = Scaffold_Thickness)) +
geom_boxplot() + geom_point(position = position_dodge(width = 0.75)) +
#geom_text(data = mean_Oxygen_Surface, aes(label = paste("Mean Surface Oxygen = \n", round(mean_Oxygen_Surface, 1)), y = mean_Oxygen_Surface-25), vjust = 0.1, position = position_nudge(x = 0.0)) +
labs(x = "Measurement Date", y = "Oxygen Surface Concentration (µmol/L)") +
ggtitle("Oxygen Surface Concentration (µmol/L) Comparison between Thicknesses and Dates")
O2_plot
ggsave("Plots/O2_plot.png", O2_plot, device = "png")
# Running ANOVA
anova_result <- aov(Oxygen_Surface ~ Scaffold_Thickness, data = Full_results_segmented)
summary(anova_result)
# What about DBL Thickness?
mean_DBL_end <- Full_results_segmented %>%
group_by(Scaffold_Thickness, date) %>%
summarize(mean_DBL_end = mean(Breakpoint))
# Plotting the DBL Thickness for each scaffold thickness
DBL_plot <- ggplot(Full_results_segmented, aes(x = date, y = -Breakpoint, group = interaction(Scaffold_Thickness, date), color = Scaffold_Thickness)) +
geom_boxplot() + geom_point(position = position_dodge(width = 0.75)) +
#geom_text(data = mean_DBL_end, aes(label = paste("Mean DBL Thickness = \n", round(-mean_DBL_end, 1)), y = -mean_DBL_end-65), vjust = 0.1, position = position_nudge(x = 0.0)) +
labs(x = "Measurement Date)", y = "DBL Thickness (µm)") +
ggtitle("DBL Thickness (µm) Comparison between Thicknesses and Dates")
DBL_plot
ggsave("Plots/DBL_plot.png", DBL_plot, device = "png")
